security:
    encoders:
        App\Entity\User:
            algorithm: auto

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        register:
            pattern: ^/api/register
            stateless: true
            anonymous: true
        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api_doc:
            pattern: ^/api/doc
            security: false
        projects:
            pattern: ^/api/projects
            stateless: true
            methods: ["GET"]
            anonymous: true 
        experiences:
            pattern: ^/api/experiences
            stateless: true
            methods: ["GET"]    
            anonymous: true  
        educations:
            pattern: ^/api/educations
            stateless: true
            methods: ["GET"]    
            anonymous: true  
        skills:
            pattern: ^/api/skills
            stateless: true
            methods: ["GET"]    
            anonymous: true    
        softwares:
            pattern: ^/api/softwares
            stateless: true
            methods: ["GET"]    
            anonymous: true  
        categories:
            pattern: ^/api/categories
            stateless: true
            methods: ["GET"]    
            anonymous: true             
        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/projects, methods: ["GET"], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/experiences, methods: ["GET"], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/educations, methods: ["GET"], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/skills, methods: ["GET"], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/softwares, methods: ["GET"], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/categories, methods: ["GET"], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
