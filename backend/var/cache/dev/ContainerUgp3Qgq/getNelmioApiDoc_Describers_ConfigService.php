<?php

namespace ContainerUgp3Qgq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getNelmioApiDoc_Describers_ConfigService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'nelmio_api_doc.describers.config' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Describer\ExternalDocDescriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'nelmio'.\DIRECTORY_SEPARATOR.'api-doc-bundle'.\DIRECTORY_SEPARATOR.'Describer'.\DIRECTORY_SEPARATOR.'DescriberInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'nelmio'.\DIRECTORY_SEPARATOR.'api-doc-bundle'.\DIRECTORY_SEPARATOR.'Describer'.\DIRECTORY_SEPARATOR.'ExternalDocDescriber.php';

        return $container->privates['nelmio_api_doc.describers.config'] = new \Nelmio\ApiDocBundle\Describer\ExternalDocDescriber(['info' => ['title' => 'Portfolio API', 'version' => '1.0.0'], 'servers' => [0 => ['url' => 'http://portfolio/api']], 'paths' => ['/categories' => ['get' => ['summary' => 'List all Categories', 'tags' => [0 => 'Categories'], 'description' => '', 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['type' => 'array', 'items' => ['$ref' => '#/components/schemas/Category']]]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'post' => ['summary' => 'Add a new Category', 'tags' => [0 => 'Categories'], 'requestBody' => ['description' => '**Category** that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Category']]], 'required' => true], 'responses' => [201 => ['description' => 'New **Category** resource created', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Category']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 400 => ['description' => 'Syntax error, Validations errors of fields, Wrong attributes', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]]], '/categories/{id}' => ['get' => ['summary' => 'Return a Categories by his ID', 'tags' => [0 => 'Categories'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Category resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Category']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 404 => ['description' => 'Resource **Category** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'put' => ['summary' => 'Updated an existing Category by his {id}', 'tags' => [0 => 'Categories'], 'requestBody' => ['description' => 'Category that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Category']]], 'required' => true], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Category']]]], 404 => ['description' => 'Resource not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]], 'delete' => ['summary' => 'Delete an existing Category', 'tags' => [0 => 'Categories'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Category resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => ' **Category** Resource id deleted', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/SuccessMessage']]]], 404 => ['description' => 'Resource **Category** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]]], '/projects' => ['get' => ['summary' => 'List all Project', 'tags' => [0 => 'Projects'], 'description' => '', 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['type' => 'array', 'items' => ['$ref' => '#/components/schemas/Project']]]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'post' => ['summary' => 'Add a new Project', 'tags' => [0 => 'Projects'], 'requestBody' => ['description' => '**Project** that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Project']]], 'required' => true], 'responses' => [201 => ['description' => 'New **Project** resource created', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Project']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 400 => ['description' => 'Syntax error, Validations errors of fields, Wrong attributes', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]]], '/projects/{id}' => ['get' => ['summary' => 'Return a Project by his ID', 'tags' => [0 => 'Projects'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of project resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Project']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 404 => ['description' => 'Resource **Project** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'put' => ['summary' => 'Updated an existing Project by his {id}', 'tags' => [0 => 'Projects'], 'requestBody' => ['description' => 'Project that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Project']]], 'required' => true], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Project']]]], 404 => ['description' => 'Resource not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]], 'delete' => ['summary' => 'Delete an existing Project', 'tags' => [0 => 'Projects'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of project resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => ' **Project** Resource id deleted', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/SuccessMessage']]]], 404 => ['description' => 'Resource **Project** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]]], '/educations' => ['get' => ['summary' => 'List all Educations', 'tags' => [0 => 'Educations'], 'description' => '', 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['type' => 'array', 'items' => ['$ref' => '#/components/schemas/Education']]]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'post' => ['summary' => 'Add a new Education', 'tags' => [0 => 'Educations'], 'requestBody' => ['description' => '**Education** that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Education']]], 'required' => true], 'responses' => [201 => ['description' => 'New **Education** resource created', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Education']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 400 => ['description' => 'Syntax error, Validations errors of fields, Wrong attributes', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]]], '/educations/{id}' => ['get' => ['summary' => 'Return a Educations by his ID', 'tags' => [0 => 'Educations'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Education resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Education']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 404 => ['description' => 'Resource **Education** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'put' => ['summary' => 'Updated an existing Education by his {id}', 'tags' => [0 => 'Educations'], 'requestBody' => ['description' => 'Education that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Education']]], 'required' => true], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Education']]]], 404 => ['description' => 'Resource not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]], 'delete' => ['summary' => 'Delete an existing Education', 'tags' => [0 => 'Educations'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Education resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => ' **Education** Resource id deleted', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/SuccessMessage']]]], 404 => ['description' => 'Resource **Education** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]]], '/experience' => ['get' => ['summary' => 'List all Experiences', 'tags' => [0 => 'Experiences'], 'description' => '', 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['type' => 'array', 'items' => ['$ref' => '#/components/schemas/Experience']]]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'post' => ['summary' => 'Add a new Experience', 'tags' => [0 => 'Experiences'], 'requestBody' => ['description' => '**Experience** that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Experience']]], 'required' => true], 'responses' => [201 => ['description' => 'New **Experience** resource created', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Experience']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 400 => ['description' => 'Syntax error, Validations errors of fields, Wrong attributes', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]]], '/experience/{id}' => ['get' => ['summary' => 'Return a Experience by his ID', 'tags' => [0 => 'Experiences'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Experience resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Experience']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 404 => ['description' => 'Resource **Experience** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'put' => ['summary' => 'Updated an existing Experience by his {id}', 'tags' => [0 => 'Experiences'], 'requestBody' => ['description' => 'Experience that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Experience']]], 'required' => true], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Experience']]]], 404 => ['description' => 'Resource not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]], 'delete' => ['summary' => 'Delete an existing Experience', 'tags' => [0 => 'Experiences'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Experience resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => ' **Experience** Resource id deleted', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/SuccessMessage']]]], 404 => ['description' => 'Resource **Experience** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]]], '/skill' => ['get' => ['summary' => 'List all Skills', 'tags' => [0 => 'Skills'], 'description' => '', 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['type' => 'array', 'items' => ['$ref' => '#/components/schemas/Skill']]]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'post' => ['summary' => 'Add a new Skill', 'tags' => [0 => 'Skills'], 'requestBody' => ['description' => '**Skill** that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Skill']]], 'required' => true], 'responses' => [201 => ['description' => 'New **Skill** resource created', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Skill']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 400 => ['description' => 'Syntax error, Validations errors of fields, Wrong attributes', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]]], '/skills/{id}' => ['get' => ['summary' => 'Return a Skill by his ID', 'tags' => [0 => 'Skills'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Skill resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Skill']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 404 => ['description' => 'Resource **Skill** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'put' => ['summary' => 'Updated an existing Skill by his {id}', 'tags' => [0 => 'Skills'], 'requestBody' => ['description' => 'Skill that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Skill']]], 'required' => true], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Skill']]]], 404 => ['description' => 'Resource not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]], 'delete' => ['summary' => 'Delete an existing Skill', 'tags' => [0 => 'Skills'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Skill resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => ' **Skill** Resource id deleted', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/SuccessMessage']]]], 404 => ['description' => 'Resource **Skill** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]]], '/software' => ['get' => ['summary' => 'List all Softwares', 'tags' => [0 => 'Softwares'], 'description' => '', 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['type' => 'array', 'items' => ['$ref' => '#/components/schemas/Software']]]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'post' => ['summary' => 'Add a new Software', 'tags' => [0 => 'Softwares'], 'requestBody' => ['description' => '**Software** that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Software']]], 'required' => true], 'responses' => [201 => ['description' => 'New **Software** resource created', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Software']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 400 => ['description' => 'Syntax error, Validations errors of fields, Wrong attributes', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]]], '/softwares/{id}' => ['get' => ['summary' => 'Return a Software by his ID', 'tags' => [0 => 'Softwares'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Software resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Software']]]], 401 => ['description' => 'Unauthorized', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]], 404 => ['description' => 'Resource **Software** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]], 'put' => ['summary' => 'Updated an existing Software by his {id}', 'tags' => [0 => 'Softwares'], 'requestBody' => ['description' => 'Software that need to be added', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Software']]], 'required' => true], 'responses' => [200 => ['description' => 'Successful response', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/Software']]]], 404 => ['description' => 'Resource not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorMessage']]]]]], 'delete' => ['summary' => 'Delete an existing Software', 'tags' => [0 => 'Softwares'], 'parameters' => [0 => ['name' => 'id', 'in' => 'query', 'description' => '**ID** of Software resource. *Example: 5,11.*', 'required' => true, 'schema' => ['type' => 'integer']]], 'responses' => [200 => ['description' => ' **Software** Resource id deleted', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/SuccessMessage']]]], 404 => ['description' => 'Resource **Software** not found', 'content' => ['application/json' => ['schema' => ['$ref' => '#/components/schemas/ErrorStatusMessage']]]]]]]], 'components' => ['securitySchemes' => ['Bearer' => ['type' => 'http', 'scheme' => 'bearer', 'bearerFormat' => 'JWT']], 'schemas' => ['Project' => ['type' => 'object', 'properties' => ['id' => ['type' => 'integer'], 'name' => ['type' => 'string'], 'description' => ['type' => 'string'], 'url' => ['type' => 'string'], 'img_static' => ['type' => 'string'], 'img_hover' => ['type' => 'string'], 'alt_static' => ['type' => 'string'], 'alt_hover' => ['type' => 'string'], 'creation_date' => ['type' => 'string']], 'required' => [0 => 'id', 1 => 'name']], 'Education' => ['type' => 'object', 'properties' => ['id' => ['type' => 'integer'], 'title' => ['type' => 'string'], 'school' => ['type' => 'string'], 'city' => ['type' => 'string'], 'start_date' => ['type' => 'string']]], 'Experience' => ['type' => 'object', 'properties' => ['id' => ['type' => 'integer'], 'name' => ['type' => 'string'], 'description' => ['type' => 'string'], 'company' => ['type' => 'string'], 'logo_company' => ['type' => 'string'], 'start_date' => ['type' => 'string'], 'end_date' => ['type' => 'string']]], 'Category' => ['type' => 'object', 'properties' => ['id' => ['type' => 'integer'], 'name' => ['type' => 'string']]], 'Skill' => ['type' => 'object', 'properties' => ['id' => ['type' => 'integer'], 'name' => ['type' => 'string'], 'icon' => ['type' => 'string'], 'description' => ['type' => 'string'], 'knowledge_level' => ['type' => 'integer']]], 'Software' => ['type' => 'object', 'properties' => ['id' => ['type' => 'integer'], 'name' => ['type' => 'string'], 'icon' => ['type' => 'string']]], 'SuccessMessage' => ['type' => 'object', 'properties' => ['message' => ['type' => 'string']]], 'ErrorMessage' => ['type' => 'object', 'properties' => ['message' => ['type' => 'string']]], 'ErrorStatusMessage' => ['type' => 'object', 'properties' => ['status' => ['type' => 'integer'], 'message' => ['type' => 'string']], 'example' => ['status' => 404, 'message' => 'Project 4 not found']]]], 'security' => [0 => ['Bearer' => []]]]);
    }
}
